// server.js
require("dotenv").config(); // Carga las variables de entorno
const app = require("./app"); // Importa tu aplicaci√≥n Express

const { getAppDataSource } = require("./src/config/data-source"); // Importa la funci√≥n de 

const PORT = process.env.PORT || 8080; // Usar el puerto 8080 como fallback (o el 9000 que usabas antes, seg√∫n prefieras)

async function startServer() {
  try {
    // Espera a que la base de datos se inicialice completamente
    // Esto incluye la creaci√≥n del esquema 'companies' y la sincronizaci√≥n de TypeORM
    const AppDataSource = await getAppDataSource();

    console.log("‚úÖ Base de datos conectada con TypeORM");

    // Estas l√≠neas ahora se ejecutar√°n despu√©s de que la base de datos est√© lista
    console.log(
      "Entidades registradas:",
      AppDataSource.entityMetadatas.map((e) => e.name)
    );

    try {
      const metadata = AppDataSource.getMetadata("User");
      console.log("‚úÖ Metadata de 'User' encontrada:", metadata.tableName);
    } catch (err) {
      console.error(
        "‚ö†Ô∏è No se pudo cargar metadata de 'User':",
        err.message
      );
    }

    // Arranca el servidor **una sola vez** despu√©s de que todo est√© inicializado
    app.listen(PORT, "0.0.0.0", () => {
      console.log(`üöÄ Servidor Express escuchando en el puerto ${PORT}`);
      console.log(`Acceso al backend en: http://localhost:${PORT}`);
    });
  } catch (err) {
    console.error("‚ùå Error cr√≠tico al iniciar el servidor:", err);
    process.exit(1); // Sale del proceso si la base de datos no se inicializa
  }
}

// Llama a la funci√≥n as√≠ncrona para iniciar el servidor
startServer();
